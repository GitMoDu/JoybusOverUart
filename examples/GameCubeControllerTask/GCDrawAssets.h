// GCDrawAssets.h

#ifndef _GC_DRAW_ASSETS_h
#define _GC_DRAW_ASSETS_h

#include <stdint.h>

namespace GCDrawAssets
{
	namespace Pallete
	{
		static constexpr uint8_t Black = 0;
		static constexpr uint32_t WhitePadRGB = 0xB5AAB1;
		static constexpr uint32_t WhiteDeepRGB = 0x726B70;
		static constexpr uint32_t YellowRGB = 0xFFDD00;
		static constexpr uint32_t YellowDarkRGB = 0x4C4100;
		static constexpr uint32_t PurpleRGB = 0x36007C;
		static constexpr uint16_t WhitePad = 0xb556;
		static constexpr uint16_t WhiteDeep = 0x9c72;
		static constexpr uint16_t WhitePadAA = 0x736e;
		static constexpr uint32_t GrayPadRGB = 0x726B6F;
		static constexpr uint16_t GrayPad = 0x734d;
		static constexpr uint16_t GrayDeepPad = 0x4a29;
		static constexpr uint16_t GrayShallowPad = 0x7baf;


		static constexpr int8_t HighlightTint = 100;
		static constexpr int8_t HighlightTintSoft = 70;
		static constexpr int8_t HighlightTintStrong = 110;
		static constexpr int8_t DisconnectTint = -90;
		static constexpr int8_t DisconnectTintSoft = -60;
	}

	namespace JoyLimits
	{
		static constexpr uint8_t Diameter = 25;
		static constexpr int8_t Octshift = 3;
	}

	namespace JoyCLimits
	{
		static constexpr uint8_t Diameter = 23;
		static constexpr int8_t Octshift = 2;
	}

	struct TriggerLimits
	{
		static constexpr uint8_t InnerHeight = 5;

		static constexpr uint8_t GetHeight()
		{
			return InnerHeight + 2;
		}

		template<const uint8_t width>
		static constexpr uint8_t GetWidth()
		{
			return GetInnerWidth<width>() + 2;
		}

		template<const uint8_t width>
		static constexpr uint8_t GetInnerWidth()
		{
			return (width / 4);
		}
	};

	namespace Joystick
	{
		static constexpr uint8_t Width = 17;
		static constexpr uint8_t Height = 17;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4a49, 0x83f0, 0xacf4, 0xb556, 0xacf4, 0x83f0, 0x4a49, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
			0x0000, 0x0000, 0x0000, 0x39e7, 0xa4f4, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0xa4f4, 0x39e7, 0x0000, 0x0000, 0x0000,
			0x0000, 0x0000, 0x5aab, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x5aab, 0x0000, 0x0000,
			0x0000, 0x39e7, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x41e7, 0x0000,
			0x0000, 0xa4f4, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xacf4, 0x0000,
			0x4a49, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x5269,
			0x83f0, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0x8c10,
			0xacf4, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xacf4,
			0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556,
			0xacf4, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xad14,
			0x8c10, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x6b4c, 0xb556, 0x8c10,
			0x5269, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0x526a,
			0x0000, 0xacf4, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xacf4, 0x0000,
			0x0000, 0x41e8, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0xb556, 0xb556, 0x41e8, 0x0000,
			0x0000, 0x0000, 0x5aab, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0x5acb, 0x0000, 0x0000,
			0x0000, 0x0000, 0x0000, 0x41e8, 0xacf4, 0xb556, 0xb556, 0x6b4c, 0x6b4c, 0x6b4c, 0xb556, 0xb556, 0xacf4, 0x41e8, 0x0000, 0x0000, 0x0000,
			0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x526a, 0x8c10, 0xad14, 0xb556, 0xad14, 0x8c10, 0x526a, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
		};
	}

	namespace JoyC
	{
		static constexpr uint8_t Width = 13;
		static constexpr uint8_t Height = 13;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x0000, 0x4a00, 0xb4c0, 0xee60, 0xfec0, 0xee60, 0xb4c0, 0x4a00, 0x0000, 0x0000, 0x0000,
			0x0000, 0x0020, 0xa440, 0xf680, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xf680, 0xa440, 0x0020, 0x0000,
			0x0000, 0xa440, 0xfec0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfec0, 0xa440, 0x0000,
			0x4a00, 0xf680, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xf680, 0x4a20,
			0xb4c0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xe5e0, 0x6ac0, 0x6ac0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xb4c0,
			0xee60, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0x6ac0, 0xe5e0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xee60,
			0xfec0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0x6ac0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0,
			0xee60, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0x6ac0, 0xe5e0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xee60,
			0xb4c0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xe5e0, 0x6ac0, 0x6ac0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xb4e0,
			0x4a00, 0xf680, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xf680, 0x5220,
			0x0000, 0xa460, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xa460, 0x0000,
			0x0000, 0x0020, 0xa460, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xfee0, 0xa460, 0x0020, 0x0000,
			0x0000, 0x0000, 0x0000, 0x5220, 0xb4e0, 0xee60, 0xfee0, 0xee60, 0xb4e0, 0x5220, 0x0000, 0x0000, 0x0000
		};
	}

	namespace ButtonA
	{
		static constexpr uint8_t Width = 12;
		static constexpr uint8_t Height = 12;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x0000, 0x04f1, 0x04f1, 0x04f1, 0x040e, 0x040e, 0x0207, 0x0000, 0x0000, 0x0000,
			0x0000, 0x0000, 0x04f1, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x0000, 0x0000,
			0x0000, 0x04f1, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x0000,
			0x04f1, 0x040e, 0x040e, 0x040e, 0x040e, 0x0268, 0x0268, 0x040e, 0x040e, 0x040e, 0x040e, 0x0207,
			0x04f1, 0x040e, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x040e, 0x040e,
			0x04f1, 0x040e, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x040e, 0x040e,
			0x040e, 0x040e, 0x040e, 0x040e, 0x0268, 0x0268, 0x0268, 0x0268, 0x040e, 0x040e, 0x040e, 0x032b,
			0x040e, 0x040e, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x040e, 0x032b,
			0x0207, 0x040e, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x0268, 0x040e, 0x040e, 0x032b, 0x032b,
			0x0000, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x032b, 0x0000,
			0x0000, 0x0000, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x040e, 0x032b, 0x032b, 0x0000, 0x0000,
			0x0000, 0x0000, 0x0000, 0x0207, 0x040e, 0x032b, 0x032b, 0x032b, 0x032b, 0x0000, 0x0000, 0x0000
		};
	}

	namespace ButtonB
	{
		static constexpr uint8_t Width = 9;
		static constexpr uint8_t Height = 9;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x40a1, 0xfae9, 0xfae9, 0xfa46, 0x40a1, 0x0000, 0x0000,
			0x0000, 0xb1a4, 0xfae9, 0xfa46, 0xfa46, 0xfa46, 0xfa46, 0x68e2, 0x0000,
			0x40a1, 0xfae9, 0xfa46, 0x8943, 0x8943, 0xfa46, 0xfa46, 0xfa46, 0x40a1,
			0xfae9, 0xfa46, 0xfa46, 0x8943, 0xfa46, 0x8943, 0xfa46, 0xfa46, 0xb1a4,
			0xfae9, 0xfa46, 0xfa46, 0x8943, 0x8943, 0xfa46, 0xfa46, 0xfa46, 0xb1a4,
			0xfae9, 0xfa46, 0xfa46, 0x8943, 0xfa46, 0x8943, 0xfa46, 0xfa46, 0xb1a4,
			0x40a1, 0xfa46, 0xfa46, 0x8943, 0x8943, 0xfa46, 0xfa46, 0xfa46, 0x40a1,
			0x0000, 0x68e2, 0xfa46, 0xfa46, 0xfa46, 0xfa46, 0xb1a4, 0x40a1, 0x0000,
			0x0000, 0x0000, 0x40a1, 0xb1a4, 0xb1a4, 0xb1a4, 0x40a1, 0x0000, 0x0000
		};
	}

	namespace ButtonStart
	{
		static constexpr uint8_t Width = 6;
		static constexpr uint8_t Height = 6;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x630c, 0x94b2, 0x94b2, 0x5aeb, 0x0000,
			0x630c, 0x8c71, 0x7bcf, 0x7bef, 0x7bef, 0x4a49,
			0x94b2, 0x7bcf, 0x7bef, 0x7bef, 0x7bef, 0x632c,
			0x94b2, 0x7bef, 0x7bef, 0x7bef, 0x7bef, 0x632c,
			0x5aeb, 0x7bef, 0x7bef, 0x7bef, 0x6b6d, 0x4208,
			0x0000, 0x4a49, 0x632c, 0x632c, 0x4208, 0x0000
		};
	}

	namespace ButtonX
	{
		static constexpr uint8_t Width = 9;
		static constexpr uint8_t Height = 13;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x3165, 0x7baf, 0x7baf, 0x7baf, 0x0000, 0x0000, 0x0000, 0x0000,
			0x3165, 0x7baf, 0x734d, 0x734d, 0x734d, 0x7baf, 0x3165, 0x0000, 0x0000,
			0x3165, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165, 0x0000,
			0x3165, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165, 0x3165,
			0x0000, 0x7baf, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x3165,
			0x0000, 0x3165, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165,
			0x0000, 0x0000, 0x3165, 0x7baf, 0x734d, 0x734d, 0x734d, 0x3165, 0x0000,
			0x0000, 0x0000, 0x0000, 0x0000, 0x3165, 0x3165, 0x3165, 0x0000, 0x0000
		};
	}

	namespace ButtonY
	{
		static constexpr uint8_t Width = 13;
		static constexpr uint8_t Height = 9;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x0000, 0x0000, 0x3165, 0x7baf, 0x7baf, 0x7baf, 0x7baf, 0x7baf, 0x3165, 0x0000, 0x0000,
			0x0000, 0x0000, 0x3165, 0x7baf, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x3165, 0x0000,
			0x0000, 0x3165, 0x734d, 0x734d, 0x734d, 0x4a29, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165,
			0x0000, 0x7baf, 0x734d, 0x734d, 0x734d, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165,
			0x7baf, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165,
			0x7baf, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x4a29, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165, 0x0000,
			0x7baf, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x734d, 0x3165, 0x3165, 0x3165, 0x0000, 0x0000,
			0x3165, 0x7baf, 0x734d, 0x734d, 0x734d, 0x3165, 0x3165, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
			0x0000, 0x3165, 0x734d, 0x734d, 0x3165, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
		};
	}

	namespace ButtonZ
	{
		static constexpr uint8_t Width = 16;
		static constexpr uint8_t Height = 5;

		static constexpr uint8_t Bitmask[] PROGMEM{
			0b01111111, 0b10000000,
			0b11111111, 0b11111100,
			0b00001111, 0b11111110,
			0b00000000, 0b11111111,
			0b00000000, 0b00001111,
		};
	}

	namespace DPadUp
	{
		static constexpr uint8_t Width = 5;
		static constexpr uint8_t Height = 5;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x736e, 0x736e, 0x736e, 0x736e, 0x736e,
			0x736e, 0x734d, 0x5acb, 0x734d, 0x736e,
			0x736e, 0x6b0c, 0x41e8, 0x6b0c, 0x736e,
			0x736e, 0x5249, 0x41e8, 0x5249, 0x736e,
			0x736e, 0x736e, 0x736e, 0x736e, 0x736e
		};
	}

	namespace DPadLeft
	{
		static constexpr uint8_t Width = 5;
		static constexpr uint8_t Height = 5;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x736e, 0x736e, 0x736e, 0x736e, 0x736e,
			0x736e, 0x734d, 0x6b0c, 0x5249, 0x736e,
			0x736e, 0x5acb, 0x41e8, 0x41e8, 0x736e,
			0x736e, 0x734d, 0x6b0c, 0x5249, 0x736e,
			0x736e, 0x736e, 0x736e, 0x736e, 0x736e
		};
	}

	namespace DPadCenter
	{
		static constexpr uint8_t Width = 5;
		static constexpr uint8_t Height = 5;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x736e, 0x736e, 0x734d, 0x736e, 0x736e,
			0x736e, 0x528a, 0x41e8, 0x526a, 0x736e,
			0x734d, 0x41e8, 0x41e8, 0x41e8, 0x734d,
			0x736e, 0x526a, 0x41e8, 0x526a, 0x736e,
			0x736e, 0x736e, 0x734d, 0x736e, 0x736e
		};
	}

	namespace Icon
	{
		static constexpr uint8_t Width = 16;
		static constexpr uint8_t Height = 12;

		static constexpr uint16_t Bitmap[] PROGMEM{
			0x0000, 0x0000, 0x1082, 0x10c6, 0x2129, 0x2129, 0x296b, 0x298b, 0x298a, 0x298b, 0x2128, 0x2128, 0x18e5, 0x0004, 0x0000, 0x0000,
			0x0000, 0x1083, 0x39cb, 0x296b, 0x214b, 0x298c, 0x4a8e, 0x52ae, 0x52ae, 0x52af, 0x296a, 0x1908, 0x52cd, 0x4a6d, 0x0066, 0x0000,
			0x0863, 0x212b, 0x212a, 0x2129, 0x192b, 0x214b, 0x296c, 0x212b, 0x212b, 0x296b, 0x10a9, 0x4a4c, 0x9473, 0x62ed, 0x31a9, 0x2105,
			0x2128, 0x31ab, 0x9471, 0x9490, 0x31ab, 0x298c, 0x212b, 0x420c, 0x420c, 0x190a, 0x118c, 0x014b, 0x0aed, 0x034d, 0x7c11, 0x73af,
			0x31aa, 0x39ec, 0xa4f3, 0xad13, 0x52af, 0x31ad, 0x190b, 0x52ae, 0x52ad, 0x00aa, 0x618a, 0x88e7, 0x038e, 0x0451, 0x6391, 0x630e,
			0x39eb, 0x31cd, 0x4a4c, 0x4a4d, 0x298d, 0x296c, 0x18e6, 0x190b, 0x190b, 0x00c6, 0x60a9, 0x9908, 0x11ac, 0x322e, 0x422f, 0x31ec,
			0x296a, 0x3a0d, 0x298c, 0x294c, 0x212b, 0x39cc, 0x10a9, 0x0000, 0x0000, 0x1909, 0x6269, 0x198b, 0x218d, 0x31ad, 0x4a90, 0x4a8e,
			0x296a, 0x296c, 0x2949, 0x298c, 0x630e, 0x8430, 0x424d, 0x1083, 0x0005, 0x7ae8, 0xe560, 0xbc85, 0x014d, 0x298b, 0x4a90, 0x52af,
			0x214a, 0x296b, 0x296a, 0x10c6, 0x528d, 0x73af, 0x3a0d, 0x0862, 0x0003, 0x72a9, 0xdd40, 0xac49, 0x00eb, 0x2106, 0x3a0e, 0x424d,
			0x2149, 0x296b, 0x2949, 0x0000, 0x10a7, 0x212a, 0x1086, 0x0000, 0x0000, 0x0086, 0x39aa, 0x10c9, 0x0862, 0x2128, 0x31ee, 0x31ab,
			0x2107, 0x298c, 0x2149, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2149, 0x31cd, 0x2127,
			0x10c6, 0x2128, 0x10c6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1086, 0x31ab, 0x1086
		};
	}

	struct ButtonZBitmaskSprite : public FlashBitMaskSprite<ButtonZ::Width, ButtonZ::Height>
	{
		ButtonZBitmaskSprite() : FlashBitMaskSprite<ButtonZ::Width, ButtonZ::Height>(ButtonZ::Bitmask)
		{}
	};

	struct JoystickBitmapSprite : public FlashBitmapRgb565Sprite<Joystick::Width, Joystick::Height>
	{
		JoystickBitmapSprite() : FlashBitmapRgb565Sprite<Joystick::Width, Joystick::Height>(Joystick::Bitmap)
		{}
	};

	struct ButtonABitmapSprite : public FlashBitmapRgb565Sprite<ButtonA::Width, ButtonA::Height>
	{
		ButtonABitmapSprite() : FlashBitmapRgb565Sprite<ButtonA::Width, ButtonA::Height>(ButtonA::Bitmap)
		{}
	};

	struct ButtonXBitmapSprite : public FlashBitmapRgb565Sprite<ButtonX::Width, ButtonX::Height>
	{
		ButtonXBitmapSprite() : FlashBitmapRgb565Sprite<ButtonX::Width, ButtonX::Height>(ButtonX::Bitmap)
		{}
	};

	struct ButtonYBitmapSprite : public FlashBitmapRgb565Sprite<ButtonY::Width, ButtonY::Height>
	{
		ButtonYBitmapSprite() : FlashBitmapRgb565Sprite<ButtonY::Width, ButtonY::Height>(ButtonY::Bitmap)
		{}
	};

	struct ButtonBBitmapSprite : public FlashBitmapRgb565Sprite<ButtonB::Width, ButtonB::Height>
	{
		ButtonBBitmapSprite() : FlashBitmapRgb565Sprite<ButtonB::Width, ButtonB::Height>(ButtonB::Bitmap)
		{}
	};

	struct JoyCBitmapSprite : public FlashBitmapRgb565Sprite<JoyC::Width, JoyC::Height>
	{
		JoyCBitmapSprite() : FlashBitmapRgb565Sprite<JoyC::Width, JoyC::Height>(JoyC::Bitmap)
		{}
	};

	struct ButtonStartBitmapSprite : public FlashBitmapRgb565Sprite<ButtonStart::Width, ButtonStart::Height>
	{
		ButtonStartBitmapSprite() : FlashBitmapRgb565Sprite<ButtonStart::Width, ButtonStart::Height>(ButtonStart::Bitmap)
		{}
	};

	struct DPadUpBitmapSprite : public FlashBitmapRgb565Sprite<DPadUp::Width, DPadUp::Height>
	{
		DPadUpBitmapSprite() : FlashBitmapRgb565Sprite<DPadUp::Width, DPadUp::Height>(DPadUp::Bitmap)
		{}
	};

	struct DPadLeftBitmapSprite : public FlashBitmapRgb565Sprite<DPadLeft::Width, DPadLeft::Height>
	{
		DPadLeftBitmapSprite() : FlashBitmapRgb565Sprite<DPadLeft::Width, DPadLeft::Height>(DPadLeft::Bitmap)
		{}
	};

	struct DPadCenterBitmapSprite : public FlashBitmapRgb565Sprite<DPadCenter::Width, DPadCenter::Height>
	{
		DPadCenterBitmapSprite() : FlashBitmapRgb565Sprite<DPadCenter::Width, DPadCenter::Height>(DPadCenter::Bitmap)
		{}
	};

	struct IconBitmapSprite : public FlashBitmapRgb565Sprite<Icon::Width, Icon::Height>
	{
		IconBitmapSprite() : FlashBitmapRgb565Sprite<Icon::Width, Icon::Height>(Icon::Bitmap)
		{}
	};

	template<const uint8_t OffsetX,
		const uint8_t OffsetY,
		const uint8_t Width,
		const uint8_t Height>
	struct GCControllerLayout
	{
		static constexpr uint8_t GetJoystickScale()
		{
			return (JoyLimits::Diameter - (((uint16_t)Joystick::Width * 3) / 5)) / 2;
		}

		static constexpr uint8_t GetJoystickCScale()
		{
			return (JoyCLimits::Diameter - (((uint16_t)JoyC::Width * 4) / 5)) / 2;
		}

		static constexpr uint8_t GetButtonsAvailableWidth()
		{
			return Width / 2;
		}

		static constexpr uint8_t GetDPadDiameter()
		{
			return (2 * DPadUp::Height) + DPadCenter::Height;
		}

		static constexpr uint8_t GetDPadX()
		{
			return OffsetX + (((Width / 2) - GetDPadDiameter()) / 2);
		}

		static constexpr uint8_t GetDPadY()
		{
			return GetJoyCLimitsY() + ((JoyLimits::Diameter - GetDPadDiameter()) / 2);
		}

		static constexpr uint8_t GetButtonsWidth()
		{
			return ButtonB::Width + ButtonA::Width + ButtonX::Width + 2;
		}

		static constexpr uint8_t GetLX()
		{
			return OffsetX;
		}

		static constexpr uint8_t GetRX()
		{
			return GetLX() + TriggerLimits::GetWidth<Width>() + 2;
		}

		static constexpr uint8_t GetLRY()
		{
			return OffsetY;
		}

		static constexpr uint8_t GetLRWidth()
		{
			return TriggerLimits::GetWidth<Width>();
		}

		static constexpr uint8_t GetLRWidth(const uint8_t scale)
		{
			return ((uint16_t)TriggerLimits::GetInnerWidth<Width>() * scale) / UINT8_MAX;
		}

		static constexpr uint8_t GetLRInnerWidth()
		{
			return TriggerLimits::GetWidth<Width>();
		}

		static constexpr uint8_t GetLRHeight()
		{
			return TriggerLimits::GetHeight();
		}

		static constexpr uint8_t GetLRInnerHeight()
		{
			return TriggerLimits::InnerHeight;
		}

		static constexpr uint8_t GetJoyCLimitsX()
		{
			return GetButtonBX() + ButtonB::Width - JoyCLimits::Diameter;
		}

		static constexpr uint8_t GetJoyCLimitsY()
		{
			return Height - 1 - JoyCLimits::Diameter;
		}

		static constexpr uint8_t GetJoyCHeadX()
		{
			return GetJoyCLimitsX() + ((JoyCLimits::Diameter - JoyC::Width) / 2);
		}

		static constexpr uint8_t GetJoyCHeadY()
		{
			return GetJoyCLimitsY() + ((JoyCLimits::Diameter - JoyC::Width) / 2);
		}

		static constexpr uint8_t GetJoyLimitsX()
		{
			return (((Width / 2) - JoyLimits::Diameter) / 2) - 1;
		}

		static constexpr uint8_t GetJoyLimitsY()
		{
			return TriggerLimits::GetHeight() + 4;
		}

		static constexpr uint8_t GetJoyHeadX()
		{
			return GetJoyLimitsX() + ((JoyLimits::Diameter - Joystick::Width) / 2);
		}

		static constexpr uint8_t GetJoyHeadY()
		{
			return GetJoyLimitsY() + ((JoyLimits::Diameter - Joystick::Width) / 2);
		}

		static constexpr uint8_t GetIconX()
		{
			return Width - 1 - Icon::Width;
		}

		static constexpr uint8_t GetIconY()
		{
			return Height - 1 - Icon::Height;
		}

		static constexpr uint8_t GetButtonsCenterY()
		{
			return (Height + OffsetY) / 2;
		}

		static constexpr uint8_t GetButtonsCenterX()
		{
			return (Width + OffsetX) / 2;
		}

		static constexpr uint8_t GetButtonStartX()
		{
			return OffsetX + ((Width - ButtonStart::Width) / 2);
		}

		static constexpr uint8_t GetButtonStartY()
		{
			return OffsetY + ((Height - ButtonStart::Height) / 4) - 1;
		}

		static constexpr uint8_t GetButtonAX()
		{
			return GetButtonBX() + ButtonA::Width - 2;
		}

		static constexpr uint8_t GetButtonAY()
		{
			return GetButtonYY() + ButtonY::Height + 1;
		}

		static constexpr uint8_t GetButtonBX()
		{
			return GetButtonsCenterX() + ((GetButtonsAvailableWidth() - GetButtonsWidth()) / 2);
		}

		static constexpr uint8_t GetButtonBY()
		{
			return GetButtonAY() + ButtonA::Height / 2;
		}

		static constexpr uint8_t GetButtonXX()
		{
			return GetButtonAX() + ButtonA::Width + 2;
		}

		static constexpr uint8_t GetButtonXY()
		{
			return GetButtonAY() - 3;
		}

		static constexpr uint8_t GetButtonYX()
		{
			return GetButtonAX() - (ButtonY::Width / 2) + 1;
		}

		static constexpr uint8_t GetButtonYY()
		{
			return GetZY() + ButtonZ::Height + 2;
		}

		static constexpr uint8_t GetZX()
		{
			return GetButtonYX() + ButtonX::Width + 2;
		}

		static constexpr uint8_t GetZY()
		{
			return OffsetY + 1;
		}
	};
}
#endif